<section class="game-section" aria-labelledby="game-heading" itemscope itemtype="https://schema.org/Game">
  <div class="game-container">
    <header>
      <h1 id="game-heading" class="game-title" itemprop="name">Play 404: Cards Not Found</h1>
      <p class="game-subtitle" itemprop="description">Experience the ultimate card game adventure</p>
    </header>

    <article class="game-content">
      <section class="game-board" aria-labelledby="game-board-heading" role="application">
        <header>
          <h2 id="game-board-heading" class="sr-only">Game Board</h2>
        </header>
        <div class="game-interface" aria-live="polite" aria-atomic="true">
          <div class="game-status" role="status" aria-label="Game status">
            <p id="game-message">Welcome to 404: Cards Not Found! Click "Start Game" to begin.</p>
          </div>
          
          <div class="card-deck" aria-labelledby="deck-heading">
            <h3 id="deck-heading" class="sr-only">Card Deck</h3>
            <div class="deck-container">
              <div class="card-stack" role="button" tabindex="0" aria-label="Draw card from deck" aria-describedby="deck-desc">
                <span class="card-back">ðŸ‚ </span>
                <span id="deck-desc" class="sr-only">Click or press Enter to draw a card</span>
              </div>
              <div class="deck-counter" aria-label="Cards remaining">
                <span id="cards-remaining">52</span> cards left
              </div>
            </div>
          </div>

          <div class="player-hand" aria-labelledby="hand-heading">
            <h3 id="hand-heading">Your Hand</h3>
            <div id="hand-cards" class="hand-cards" role="group" aria-label="Your playing cards">
              <!-- Cards will be dynamically added here -->
            </div>
          </div>

          <div class="game-controls" aria-labelledby="controls-heading">
            <h3 id="controls-heading" class="sr-only">Game Controls</h3>
            <nav class="control-buttons" aria-label="Game control buttons">
              <button id="start-game" class="btn btn-primary" aria-describedby="start-desc">
                Start Game
                <span id="start-desc" class="sr-only">Begin a new game</span>
              </button>
              <button id="draw-card" class="btn btn-secondary" disabled aria-describedby="draw-desc">
                Draw Card
                <span id="draw-desc" class="sr-only">Draw a card from the deck</span>
              </button>
              <button id="reset-game" class="btn btn-outline" aria-describedby="reset-desc">
                Reset Game
                <span id="reset-desc" class="sr-only">Reset the game to start over</span>
              </button>
            </nav>
          </div>
        </div>
      </section>

      <aside class="game-info" aria-labelledby="info-heading">
        <header>
          <h2 id="info-heading">How to Play</h2>
        </header>
        <ol class="game-rules">
          <li>Click "Start Game" to begin your card adventure</li>
          <li>Draw cards from the deck by clicking "Draw Card" or the deck itself</li>
          <li>Collect cards and build your hand strategically</li>
          <li>Try to find all the missing cards (404 theme!)</li>
          <li>Use "Reset Game" to start over at any time</li>
        </ol>
        
        <section class="game-stats" aria-labelledby="stats-heading">
          <header>
            <h3 id="stats-heading">Game Statistics</h3>
          </header>
          <dl class="stats-list">
            <dt>Cards Drawn:</dt>
            <dd id="cards-drawn">0</dd>
            <dt>Games Played:</dt>
            <dd id="games-played">0</dd>
            <dt>Best Score:</dt>
            <dd id="best-score">--</dd>
          </dl>
        </section>
      </aside>
    </article>

    <nav class="game-navigation" aria-label="Game navigation">
      <a href="/" class="btn btn-outline" aria-describedby="home-nav-desc">
        Back to Home
        <span id="home-nav-desc" class="sr-only">Return to the homepage</span>
      </a>
      <a href="/about" class="btn btn-outline" aria-describedby="about-nav-desc">
        About This Game
        <span id="about-nav-desc" class="sr-only">Learn more about this project</span>
      </a>
    </nav>
  </div>
</section>

<!-- Game-specific JavaScript -->
<script>
class CardGame {
  constructor() {
    this.deck = this.createDeck();
    this.hand = [];
    this.isGameActive = false;
    this.cardsDrawn = 0;
    this.gamesPlayed = 0;
    
    this.initializeEventListeners();
    this.loadGameStats();
  }

  createDeck() {
    const suits = ['â™ ', 'â™¥', 'â™¦', 'â™£'];
    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
    const deck = [];
    
    for (const suit of suits) {
      for (const rank of ranks) {
        deck.push({ suit, rank, id: `${rank}${suit}` });
      }
    }
    
    return this.shuffleDeck(deck);
  }

  shuffleDeck(deck) {
    const shuffled = [...deck];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  initializeEventListeners() {
    document.getElementById('start-game').addEventListener('click', () => this.startGame());
    document.getElementById('draw-card').addEventListener('click', () => this.drawCard());
    document.getElementById('reset-game').addEventListener('click', () => this.resetGame());
    
    // Make deck clickable
    document.querySelector('.card-stack').addEventListener('click', () => {
      if (this.isGameActive) this.drawCard();
    });
    
    // Keyboard support for deck
    document.querySelector('.card-stack').addEventListener('keydown', (e) => {
      if ((e.key === 'Enter' || e.key === ' ') && this.isGameActive) {
        e.preventDefault();
        this.drawCard();
      }
    });
  }

  startGame() {
    this.isGameActive = true;
    this.cardsDrawn = 0;
    this.gamesPlayed++;
    
    document.getElementById('start-game').disabled = true;
    document.getElementById('draw-card').disabled = false;
    
    this.updateGameMessage('Game started! Draw your first card.');
    this.updateGameStats();
    this.announceToScreenReader('New game started. You can now draw cards.');
  }

  drawCard() {
    if (!this.isGameActive || this.deck.length === 0) return;
    
    const card = this.deck.pop();
    this.hand.push(card);
    this.cardsDrawn++;
    
    this.renderHand();
    this.updateDeckCounter();
    this.updateGameStats();
    
    if (this.deck.length === 0) {
      this.endGame();
    } else {
      this.updateGameMessage(`You drew ${card.rank}${card.suit}. Cards in hand: ${this.hand.length}`);
    }
    
    this.announceToScreenReader(`Drew ${card.rank} of ${this.getSuitName(card.suit)}`);
  }

  renderHand() {
    const handContainer = document.getElementById('hand-cards');
    handContainer.innerHTML = '';
    
    this.hand.forEach((card, index) => {
      const cardElement = document.createElement('div');
      cardElement.className = 'playing-card';
      cardElement.setAttribute('role', 'img');
      cardElement.setAttribute('aria-label', `${card.rank} of ${this.getSuitName(card.suit)}`);
      cardElement.textContent = `${card.rank}${card.suit}`;
      cardElement.tabIndex = 0;
      handContainer.appendChild(cardElement);
    });
  }

  getSuitName(suit) {
    const suitNames = {
      'â™ ': 'spades',
      'â™¥': 'hearts',
      'â™¦': 'diamonds',
      'â™£': 'clubs'
    };
    return suitNames[suit] || suit;
  }

  updateDeckCounter() {
    document.getElementById('cards-remaining').textContent = this.deck.length;
  }

  updateGameMessage(message) {
    document.getElementById('game-message').textContent = message;
  }

  updateGameStats() {
    document.getElementById('cards-drawn').textContent = this.cardsDrawn;
    document.getElementById('games-played').textContent = this.gamesPlayed;
    
    // Save stats to localStorage
    localStorage.setItem('cardGameStats', JSON.stringify({
      gamesPlayed: this.gamesPlayed,
      bestScore: this.hand.length
    }));
  }

  loadGameStats() {
    const stats = localStorage.getItem('cardGameStats');
    if (stats) {
      const parsed = JSON.parse(stats);
      this.gamesPlayed = parsed.gamesPlayed || 0;
      document.getElementById('games-played').textContent = this.gamesPlayed;
      document.getElementById('best-score').textContent = parsed.bestScore || '--';
    }
  }

  resetGame() {
    this.deck = this.createDeck();
    this.hand = [];
    this.isGameActive = false;
    this.cardsDrawn = 0;
    
    document.getElementById('start-game').disabled = false;
    document.getElementById('draw-card').disabled = true;
    document.getElementById('hand-cards').innerHTML = '';
    
    this.updateDeckCounter();
    this.updateGameMessage('Game reset. Click "Start Game" to begin again.');
    this.announceToScreenReader('Game has been reset.');
  }

  endGame() {
    this.isGameActive = false;
    document.getElementById('draw-card').disabled = true;
    this.updateGameMessage(`Game Over! You drew all ${this.cardsDrawn} cards.`);
    this.announceToScreenReader('Game completed! All cards have been drawn.');
  }

  announceToScreenReader(message) {
    const liveRegion = document.getElementById('live-region');
    if (liveRegion) {
      liveRegion.textContent = message;
    }
  }
}

// Initialize the game when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new CardGame();
});
</script>
